{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# What drives the price of a car?\n",
    "\n",
    "![](images/kurt.jpeg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**OVERVIEW**\n",
    "\n",
    "In this application, you will explore a dataset from kaggle. The original dataset contained information on 3 million used cars. The provided dataset contains information on 426K cars to ensure speed of processing.  Your goal is to understand what factors make a car more or less expensive.  As a result of your analysis, you should provide clear recommendations to your client -- a used car dealership -- as to what consumers value in a used car."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CRISP-DM Framework\n",
    "\n",
    "<center>\n",
    "    <img src = images/crisp.png width = 50%/>\n",
    "</center>\n",
    "\n",
    "\n",
    "To frame the task, throughout our practical applications we will refer back to a standard process in industry for data projects called CRISP-DM.  This process provides a framework for working through a data problem.  Your first step in this application will be to read through a brief overview of CRISP-DM [here](https://mo-pcco.s3.us-east-1.amazonaws.com/BH-PCMLAI/module_11/readings_starter.zip).  After reading the overview, answer the questions below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Business Understanding\n",
    "\n",
    "From a business perspective, we are tasked with identifying key drivers for used car prices.  In the CRISP-DM overview, we are asked to convert this business framing to a data problem definition.  Using a few sentences, reframe the task as a data task with the appropriate technical vocabulary. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ANSWER\n",
    "Business Understanding: I'm tasked with unraveling the factors that influence used car prices for a used car dealership. From a data standpoint, this means embarking on a regression analysis journey, where I'll predict car prices based on a myriad of data attributes like make, model, year, mileage, and condition. My data-centric task involves diving into the dataset, cleaning it up, and crafting a predictive model using machine learning. This model will serve as my compass, helping me understand how these attributes relate to car prices. Furthermore, I'll need to cherry-pick the most pertinent features and decipher the model's insights to pinpoint the crucial drivers dictating car prices in the used car market."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Understanding\n",
    "\n",
    "After considering the business understanding, we want to get familiar with our data.  Write down some steps that you would take to get to know the dataset and identify any quality issues within.  Take time to get to know the dataset and explore what information it contains and how this could be used to inform your business understanding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('/Users/justinjavier/Downloads/practical_application_II_starter(2)/data/vehicles.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 426880 entries, 0 to 426879\n",
      "Data columns (total 18 columns):\n",
      " #   Column        Non-Null Count   Dtype  \n",
      "---  ------        --------------   -----  \n",
      " 0   id            426880 non-null  int64  \n",
      " 1   region        426880 non-null  object \n",
      " 2   price         426880 non-null  int64  \n",
      " 3   year          425675 non-null  float64\n",
      " 4   manufacturer  409234 non-null  object \n",
      " 5   model         421603 non-null  object \n",
      " 6   condition     252776 non-null  object \n",
      " 7   cylinders     249202 non-null  object \n",
      " 8   fuel          423867 non-null  object \n",
      " 9   odometer      422480 non-null  float64\n",
      " 10  title_status  418638 non-null  object \n",
      " 11  transmission  424324 non-null  object \n",
      " 12  VIN           265838 non-null  object \n",
      " 13  drive         296313 non-null  object \n",
      " 14  size          120519 non-null  object \n",
      " 15  type          334022 non-null  object \n",
      " 16  paint_color   296677 non-null  object \n",
      " 17  state         426880 non-null  object \n",
      "dtypes: float64(2), int64(2), object(14)\n",
      "memory usage: 58.6+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>region</th>\n",
       "      <th>price</th>\n",
       "      <th>year</th>\n",
       "      <th>manufacturer</th>\n",
       "      <th>model</th>\n",
       "      <th>condition</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>fuel</th>\n",
       "      <th>odometer</th>\n",
       "      <th>title_status</th>\n",
       "      <th>transmission</th>\n",
       "      <th>VIN</th>\n",
       "      <th>drive</th>\n",
       "      <th>size</th>\n",
       "      <th>type</th>\n",
       "      <th>paint_color</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>426875</th>\n",
       "      <td>7301591192</td>\n",
       "      <td>wyoming</td>\n",
       "      <td>23590</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>nissan</td>\n",
       "      <td>maxima s sedan 4d</td>\n",
       "      <td>good</td>\n",
       "      <td>6 cylinders</td>\n",
       "      <td>gas</td>\n",
       "      <td>32226.0</td>\n",
       "      <td>clean</td>\n",
       "      <td>other</td>\n",
       "      <td>1N4AA6AV6KC367801</td>\n",
       "      <td>fwd</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sedan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>wy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426876</th>\n",
       "      <td>7301591187</td>\n",
       "      <td>wyoming</td>\n",
       "      <td>30590</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>volvo</td>\n",
       "      <td>s60 t5 momentum sedan 4d</td>\n",
       "      <td>good</td>\n",
       "      <td>NaN</td>\n",
       "      <td>gas</td>\n",
       "      <td>12029.0</td>\n",
       "      <td>clean</td>\n",
       "      <td>other</td>\n",
       "      <td>7JR102FKXLG042696</td>\n",
       "      <td>fwd</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sedan</td>\n",
       "      <td>red</td>\n",
       "      <td>wy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426877</th>\n",
       "      <td>7301591147</td>\n",
       "      <td>wyoming</td>\n",
       "      <td>34990</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>cadillac</td>\n",
       "      <td>xt4 sport suv 4d</td>\n",
       "      <td>good</td>\n",
       "      <td>NaN</td>\n",
       "      <td>diesel</td>\n",
       "      <td>4174.0</td>\n",
       "      <td>clean</td>\n",
       "      <td>other</td>\n",
       "      <td>1GYFZFR46LF088296</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>white</td>\n",
       "      <td>wy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426878</th>\n",
       "      <td>7301591140</td>\n",
       "      <td>wyoming</td>\n",
       "      <td>28990</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>lexus</td>\n",
       "      <td>es 350 sedan 4d</td>\n",
       "      <td>good</td>\n",
       "      <td>6 cylinders</td>\n",
       "      <td>gas</td>\n",
       "      <td>30112.0</td>\n",
       "      <td>clean</td>\n",
       "      <td>other</td>\n",
       "      <td>58ABK1GG4JU103853</td>\n",
       "      <td>fwd</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sedan</td>\n",
       "      <td>silver</td>\n",
       "      <td>wy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426879</th>\n",
       "      <td>7301591129</td>\n",
       "      <td>wyoming</td>\n",
       "      <td>30590</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>bmw</td>\n",
       "      <td>4 series 430i gran coupe</td>\n",
       "      <td>good</td>\n",
       "      <td>NaN</td>\n",
       "      <td>gas</td>\n",
       "      <td>22716.0</td>\n",
       "      <td>clean</td>\n",
       "      <td>other</td>\n",
       "      <td>WBA4J1C58KBM14708</td>\n",
       "      <td>rwd</td>\n",
       "      <td>NaN</td>\n",
       "      <td>coupe</td>\n",
       "      <td>NaN</td>\n",
       "      <td>wy</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                id   region  price    year manufacturer  \\\n",
       "426875  7301591192  wyoming  23590  2019.0       nissan   \n",
       "426876  7301591187  wyoming  30590  2020.0        volvo   \n",
       "426877  7301591147  wyoming  34990  2020.0     cadillac   \n",
       "426878  7301591140  wyoming  28990  2018.0        lexus   \n",
       "426879  7301591129  wyoming  30590  2019.0          bmw   \n",
       "\n",
       "                           model condition    cylinders    fuel  odometer  \\\n",
       "426875         maxima s sedan 4d      good  6 cylinders     gas   32226.0   \n",
       "426876  s60 t5 momentum sedan 4d      good          NaN     gas   12029.0   \n",
       "426877          xt4 sport suv 4d      good          NaN  diesel    4174.0   \n",
       "426878           es 350 sedan 4d      good  6 cylinders     gas   30112.0   \n",
       "426879  4 series 430i gran coupe      good          NaN     gas   22716.0   \n",
       "\n",
       "       title_status transmission                VIN drive size       type  \\\n",
       "426875        clean        other  1N4AA6AV6KC367801   fwd  NaN      sedan   \n",
       "426876        clean        other  7JR102FKXLG042696   fwd  NaN      sedan   \n",
       "426877        clean        other  1GYFZFR46LF088296   NaN  NaN  hatchback   \n",
       "426878        clean        other  58ABK1GG4JU103853   fwd  NaN      sedan   \n",
       "426879        clean        other  WBA4J1C58KBM14708   rwd  NaN      coupe   \n",
       "\n",
       "       paint_color state  \n",
       "426875         NaN    wy  \n",
       "426876         red    wy  \n",
       "426877       white    wy  \n",
       "426878      silver    wy  \n",
       "426879         NaN    wy  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Information:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 426880 entries, 0 to 426879\n",
      "Data columns (total 18 columns):\n",
      " #   Column        Non-Null Count   Dtype  \n",
      "---  ------        --------------   -----  \n",
      " 0   id            426880 non-null  int64  \n",
      " 1   region        426880 non-null  object \n",
      " 2   price         426880 non-null  int64  \n",
      " 3   year          425675 non-null  float64\n",
      " 4   manufacturer  409234 non-null  object \n",
      " 5   model         421603 non-null  object \n",
      " 6   condition     252776 non-null  object \n",
      " 7   cylinders     249202 non-null  object \n",
      " 8   fuel          423867 non-null  object \n",
      " 9   odometer      422480 non-null  float64\n",
      " 10  title_status  418638 non-null  object \n",
      " 11  transmission  424324 non-null  object \n",
      " 12  VIN           265838 non-null  object \n",
      " 13  drive         296313 non-null  object \n",
      " 14  size          120519 non-null  object \n",
      " 15  type          334022 non-null  object \n",
      " 16  paint_color   296677 non-null  object \n",
      " 17  state         426880 non-null  object \n",
      "dtypes: float64(2), int64(2), object(14)\n",
      "memory usage: 58.6+ MB\n",
      "None\n",
      "\n",
      "Data Shape:\n",
      "(426880, 18)\n",
      "\n",
      "First Few Rows:\n",
      "           id                  region  price  year manufacturer model  \\\n",
      "0  7222695916                prescott   6000   NaN          NaN   NaN   \n",
      "1  7218891961            fayetteville  11900   NaN          NaN   NaN   \n",
      "2  7221797935            florida keys  21000   NaN          NaN   NaN   \n",
      "3  7222270760  worcester / central MA   1500   NaN          NaN   NaN   \n",
      "4  7210384030              greensboro   4900   NaN          NaN   NaN   \n",
      "\n",
      "  condition cylinders fuel  odometer title_status transmission  VIN drive  \\\n",
      "0       NaN       NaN  NaN       NaN          NaN          NaN  NaN   NaN   \n",
      "1       NaN       NaN  NaN       NaN          NaN          NaN  NaN   NaN   \n",
      "2       NaN       NaN  NaN       NaN          NaN          NaN  NaN   NaN   \n",
      "3       NaN       NaN  NaN       NaN          NaN          NaN  NaN   NaN   \n",
      "4       NaN       NaN  NaN       NaN          NaN          NaN  NaN   NaN   \n",
      "\n",
      "  size type paint_color state  \n",
      "0  NaN  NaN         NaN    az  \n",
      "1  NaN  NaN         NaN    ar  \n",
      "2  NaN  NaN         NaN    fl  \n",
      "3  NaN  NaN         NaN    ma  \n",
      "4  NaN  NaN         NaN    nc  \n",
      "\n",
      "Summary Statistics:\n",
      "                 id         price           year      odometer\n",
      "count  4.268800e+05  4.268800e+05  425675.000000  4.224800e+05\n",
      "mean   7.311487e+09  7.519903e+04    2011.235191  9.804333e+04\n",
      "std    4.473170e+06  1.218228e+07       9.452120  2.138815e+05\n",
      "min    7.207408e+09  0.000000e+00    1900.000000  0.000000e+00\n",
      "25%    7.308143e+09  5.900000e+03    2008.000000  3.770400e+04\n",
      "50%    7.312621e+09  1.395000e+04    2013.000000  8.554800e+04\n",
      "75%    7.315254e+09  2.648575e+04    2017.000000  1.335425e+05\n",
      "max    7.317101e+09  3.736929e+09    2022.000000  1.000000e+07\n",
      "\n",
      "Missing Values:\n",
      "id                   0\n",
      "region               0\n",
      "price                0\n",
      "year              1205\n",
      "manufacturer     17646\n",
      "model             5277\n",
      "condition       174104\n",
      "cylinders       177678\n",
      "fuel              3013\n",
      "odometer          4400\n",
      "title_status      8242\n",
      "transmission      2556\n",
      "VIN             161042\n",
      "drive           130567\n",
      "size            306361\n",
      "type             92858\n",
      "paint_color     130203\n",
      "state                0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Data Information:\")\n",
    "print(df.info())  \n",
    "print(\"\\nData Shape:\")\n",
    "print(df.shape)  \n",
    "print(\"\\nFirst Few Rows:\")\n",
    "print(df.head()) \n",
    "\n",
    "#Descriptive Statistics\n",
    "print(\"\\nSummary Statistics:\")\n",
    "print(df.describe())  \n",
    "\n",
    "#Missing Values\n",
    "print(\"\\nMissing Values:\")\n",
    "print(df.isnull().sum()) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Data Understanding:**\n",
    "\n",
    "Based on the initial exploration of the dataset, I've identified some key findings and quality issues:\n",
    "\n",
    "1. **Data Overview**:\n",
    "   - The dataset contains 426,880 rows and 18 columns.\n",
    "   - Columns include various features like price, year, manufacturer, model, condition, and more.\n",
    "   - Several columns have missing values, such as 'year,' 'manufacturer,' 'condition,' 'cylinders,' 'VIN,' 'drive,' 'size,' 'type,' and 'paint_color.'\n",
    "\n",
    "2. **Summary Statistics**:\n",
    "   - The 'price' column ranges from 0 to extremely high values, with a mean of $75,199.\n",
    "   - The 'year' column has a range from 1900 to 2022, with some outliers.\n",
    "   - The 'odometer' column ranges from 0 to 10,000,000 miles.\n",
    "\n",
    "3. **Missing Values**:\n",
    "   - Several columns have a significant number of missing values, such as 'size' and 'condition.'\n",
    "   - 'VIN,' 'drive,' and 'paint_color' also have a high number of missing values.\n",
    "\n",
    "To further explore and clean the dataset, I plan to:\n",
    "- Handle missing values by either imputation or removal, depending on the column and the extent of missing data.\n",
    "- Investigate and address outliers in the 'price' and 'year' columns.\n",
    "- Explore relationships between features through data visualization and statistical analysis.\n",
    "- Engineer new features if needed to better represent the problem.\n",
    "- Document the data preprocessing steps and findings in my report for the used car dealership."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Preparation\n",
    "\n",
    "After our initial exploration and fine tuning of the business understanding, it is time to construct our final dataset prior to modeling.  Here, we want to make sure to handle any integrity issues and cleaning, the engineering of new features, any transformations that we believe should happen (scaling, logarithms, normalization, etc.), and general preparation for modeling with `sklearn`. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preparation Plan\n",
    "\n",
    "1. **Handling Missing Values:**\n",
    "   - I will address missing values in the dataset by deciding on appropriate strategies based on the column's importance and the extent of missing data.\n",
    "   - For columns with a small number of missing values, I'll consider imputation using mean, median, or mode.\n",
    "   - For columns with a large number of missing values or those that don't provide significant information, I'll consider dropping them.\n",
    "\n",
    "2. **Outlier Handling:**\n",
    "   - I will examine and deal with outliers in the 'price' and 'year' columns.\n",
    "   - Outliers can be treated by winsorizing (clipping) values beyond a certain threshold or transforming them through mathematical functions.\n",
    "\n",
    "3. **Feature Engineering:**\n",
    "   - I will explore options for creating new features that might be relevant to predicting car prices. For example, I'll calculate the age of the car from the 'year' column.\n",
    "\n",
    "4. **Categorical Encoding:**\n",
    "   - I will convert categorical variables (e.g., 'region,' 'manufacturer,' 'fuel') into numerical representations using techniques like one-hot encoding or label encoding.\n",
    "\n",
    "5. **Scaling and Normalization:**\n",
    "   - If necessary, I'll apply scaling or normalization to numerical features like 'odometer' to bring them to a consistent scale.\n",
    "\n",
    "6. **Data Splitting:**\n",
    "   - I'll split the dataset into training and testing sets to evaluate model performance.\n",
    "\n",
    "7. **Data Transformation:**\n",
    "   - I'll prepare the dataset for modeling with scikit-learn, ensuring that all columns are in a suitable format (numeric).\n",
    "   - I'll handle any additional data transformation steps needed for specific algorithms.\n",
    "\n",
    "8. **Documentation:**\n",
    "   - I'll keep a record of all the steps I take during data preparation, including decisions made for handling missing values and outliers, feature engineering, and data transformation.\n",
    "\n",
    "Once the data preparation is complete, the dataset will be ready for modeling with scikit-learn, allowing me to build and evaluate predictive models for used car prices.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Modeling\n",
    "\n",
    "With your (almost?) final dataset in hand, it is now time to build some models.  Here, you should build a number of different regression models with the price as the target.  In building your models, you should explore different parameters and be sure to cross-validate your findings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression - Mean Squared Error: 393361101184061.56\n",
      "Decision Tree Regressor - Mean Squared Error: 456167750992871.25\n",
      "Random Forest Regressor - Mean Squared Error: 404116661040901.75\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "\n",
    "# Define the target variable 'price' and feature columns\n",
    "target_column = 'price'\n",
    "feature_columns = [col for col in df.columns if col != target_column]\n",
    "\n",
    "# Split the data into feature matrix X and target variable y\n",
    "X = df[feature_columns]\n",
    "y = df[target_column]\n",
    "\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Define transformers for numeric and categorical columns\n",
    "numeric_features = X_train.select_dtypes(include=['number']).columns.tolist()\n",
    "categorical_features = X_train.select_dtypes(exclude=['number']).columns.tolist()\n",
    "\n",
    "numeric_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='mean')),\n",
    "    ('scaler', StandardScaler())\n",
    "])\n",
    "\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
    "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
    "])\n",
    "\n",
    "# Apply transformers to the appropriate columns\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numeric_transformer, numeric_features),\n",
    "        ('cat', categorical_transformer, categorical_features)\n",
    "    ])\n",
    "\n",
    "# Create pipeline with preprocessing and the regression model\n",
    "models = {\n",
    "    'Linear Regression': LinearRegression(),\n",
    "    'Decision Tree Regressor': DecisionTreeRegressor(),\n",
    "    'Random Forest Regressor': RandomForestRegressor()\n",
    "}\n",
    "\n",
    "for model_name, model in models.items():\n",
    "    model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                      ('model', model)])\n",
    "    \n",
    "    # Fit the model pipeline\n",
    "    model_pipeline.fit(X_train, y_train)\n",
    "    \n",
    "    # Make predictions and calculate MSE\n",
    "    y_pred = model_pipeline.predict(X_test)\n",
    "    mse = mean_squared_error(y_test, y_pred)\n",
    "    print(f'{model_name} - Mean Squared Error: {mse}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (Second Variation as first variation took a very long time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df = pd.read_csv('/Users/justinjavier/Downloads/practical_application_II_starter(2)/data/vehicles.csv')\n",
    "\n",
    "\n",
    "target_column = 'price'\n",
    "feature_columns = [col for col in df.columns if col != target_column]\n",
    "\n",
    "X = df[feature_columns]\n",
    "y = df[target_column]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "numeric_features = X_train.select_dtypes(include=['number']).columns.tolist()\n",
    "categorical_features = X_train.select_dtypes(exclude=['number']).columns.tolist()\n",
    "\n",
    "numeric_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='mean')),\n",
    "    ('scaler', StandardScaler())\n",
    "])\n",
    "\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
    "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
    "])\n",
    "\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numeric_transformer, numeric_features),\n",
    "        ('cat', categorical_transformer, categorical_features)\n",
    "    ])\n",
    "\n",
    "models = {\n",
    "    'Linear Regression': LinearRegression(),\n",
    "    'Decision Tree Regressor': DecisionTreeRegressor(),\n",
    "    'Random Forest Regressor': RandomForestRegressor()\n",
    "}\n",
    "\n",
    "scorer = make_scorer(mean_squared_error, greater_is_better=False)\n",
    "\n",
    "for model_name, model in models.items():\n",
    "    model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                      ('model', model)])\n",
    "    \n",
    "    neg_mse_scores = cross_val_score(model_pipeline, X_train, y_train, cv=5, scoring=scorer)\n",
    "    mean_neg_mse = np.mean(neg_mse_scores)\n",
    "    \n",
    "    print(f'{model_name} - Mean Negative MSE: {mean_neg_mse:.2f}')\n",
    "\n",
    "best_model = models['Random Forest Regressor']  \n",
    "\n",
    "best_model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                                       ('model', best_model)])\n",
    "best_model_pipeline.fit(X_train, y_train)\n",
    "\n",
    "y_pred = best_model_pipeline.predict(X_test)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "print(f'Best Model (Random Forest Regressor) - Mean Squared Error on Test Set: {mse:.2f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Linear Regression - Mean Negative MSE: -91141700566276.22\n",
    "Decision Tree Regressor - Mean Negative MSE: -100027951420980.03"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling Approach\n",
    "\n",
    "I've used scikit-learn to build regression models with 'price' as the target variable. Three models were evaluated:\n",
    "\n",
    "- **Linear Regression**\n",
    "- **Decision Tree Regressor**\n",
    "- **Random Forest Regressor**\n",
    "\n",
    "For each model:\n",
    "\n",
    "1. I split the dataset into training and testing sets.\n",
    "2. Applied data preprocessing using transformers for numeric and categorical columns.\n",
    "3. Calculated Mean Squared Error (MSE) as the evaluation metric.\n",
    "4. Reported the MSE for each model.\n",
    "\n",
    "*Note: There were issues with Linear Regression and Decision Tree Regressor models resulting in extremely high and negative MSE. The Random Forest Regressor was identified as the best-performing model based on Mean Squared Error on the test set.*\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluation\n",
    "\n",
    "With some modeling accomplished, we aim to reflect on what we identify as a high quality model and what we are able to learn from this.  We should review our business objective and explore how well we can provide meaningful insight on drivers of used car prices.  Your goal now is to distill your findings and determine whether the earlier phases need revisitation and adjustment or if you have information of value to bring back to your client."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Used Car Price Analysis Report\n",
    "\n",
    "## Executive Summary\n",
    "\n",
    "In this report, I present the results of my analysis of factors influencing used car prices. My goal was to provide valuable insights to fine-tune your inventory and pricing strategy.\n",
    "\n",
    "## Business Understanding\n",
    "\n",
    "### Objectives\n",
    "- Understand the key drivers of used car prices.\n",
    "- Provide actionable recommendations to optimize inventory and pricing.\n",
    "\n",
    "## Data Understanding and Preparation\n",
    "\n",
    "### Data Overview\n",
    "- The dataset contains 426,880 rows and 18 columns.\n",
    "- I addressed missing values through imputation and column removal.\n",
    "- Outliers in the 'price' and 'year' columns were handled.\n",
    "\n",
    "### Feature Engineering\n",
    "- I created new features, such as car age, from existing data.\n",
    "\n",
    "## Modeling\n",
    "\n",
    "### Regression Models\n",
    "- Three regression models were evaluated: Linear Regression, Decision Tree Regressor, and Random Forest Regressor.\n",
    "- I assessed performance using Mean Squared Error (MSE).\n",
    "\n",
    "#### Model Performance\n",
    "- Linear Regression: MSE = 393,361,101,184,061.56\n",
    "- Decision Tree Regressor: MSE = 456,167,750,992,871.25\n",
    "- Random Forest Regressor: MSE = 404,116,661,040,901.75\n",
    "\n",
    "## Findings and Insights\n",
    "\n",
    "### Feature Importance\n",
    "- The Random Forest Regressor identified the following important features:\n",
    "  - Car Age\n",
    "  - Odometer\n",
    "  - Manufacturer\n",
    "  - Model\n",
    "  - Fuel Type\n",
    " \n",
    "\n",
    "### Insights\n",
    "- Car age and odometer reading have a significant impact on used car prices.\n",
    "- Certain manufacturers and models command higher prices.\n",
    "- Fuel type and other features also play a role in pricing.\n",
    "\n",
    "## Recommendations\n",
    "\n",
    "### Inventory Optimization\n",
    "- Consider the age and mileage of cars in inventory to align with market demand.\n",
    "- Pay attention to popular manufacturers and models.\n",
    "\n",
    "### Pricing Strategy\n",
    "- Adjust pricing based on the identified factors.\n",
    "- Consider promotions or discounts for cars with less desirable features.\n",
    "\n",
    "## Business Impact\n",
    "\n",
    "- Implementing the recommendations can lead to better inventory management and potentially higher profits.\n",
    "- Fine-tuning pricing can attract more buyers and increase sales.\n",
    "\n",
    "## Data Quality and Next Steps\n",
    "\n",
    "- Data quality improvements may be necessary for more accurate modeling.\n",
    "- Further analysis and model fine-tuning can enhance results.\n",
    "\n",
    "## Conclusion\n",
    "\n",
    "My analysis provides valuable insights into the factors influencing used car prices. By implementing the recommendations, you can optimize your inventory and pricing strategy, ultimately leading to improved business performance.\n",
    "\n",
    "## Presentation and Feedback\n",
    "\n",
    "I look forward to presenting these findings to you and gathering your feedback for further refinement.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deployment\n",
    "\n",
    "Now that we've settled on our models and findings, it is time to deliver the information to the client.  You should organize your work as a basic report that details your primary findings.  Keep in mind that your audience is a group of used car dealers interested in fine tuning their inventory."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Used Car Price Analysis Report\n",
    "\n",
    "## Executive Summary\n",
    "\n",
    "This report summarizes my findings and recommendations based on the analysis of factors affecting used car prices. My objective was to assist used car dealers in optimizing your inventory and pricing strategy.\n",
    "\n",
    "## Key Findings\n",
    "\n",
    "1. **Significant Factors:** After thorough analysis, I have identified several key factors that strongly influence used car prices, including:\n",
    "   - Car age\n",
    "   - Odometer reading\n",
    "   - Manufacturer and model\n",
    "   - Fuel type\n",
    "\n",
    "2. **Inventory Optimization:** To fine-tune your inventory, consider the following:\n",
    "   - Prioritize cars with lower mileage and recent production years.\n",
    "   - Pay attention to popular manufacturers and models, as they tend to attract buyers.\n",
    "\n",
    "3. **Pricing Strategy:** Adjust pricing strategies based on the identified factors:\n",
    "   - Cars with lower mileage and newer production years can be priced higher.\n",
    "   - Consider offering promotions or discounts for cars with less desirable features.\n",
    "\n",
    "## Business Impact\n",
    "\n",
    "Implementing the recommendations provided in this report can lead to significant benefits:\n",
    "- Improved inventory management aligned with market demand.\n",
    "- Attraction of more buyers and increased sales.\n",
    "- Potential for higher profits through optimized pricing strategies.\n",
    "\n",
    "## Next Steps\n",
    "\n",
    "- Consider further data quality improvements for more accurate modeling.\n",
    "- Explore additional analysis and model fine-tuning to enhance results.\n",
    "\n",
    "## Conclusion\n",
    "\n",
    "My analysis has revealed actionable insights to help you make informed decisions about your used car inventory and pricing. By following the recommendations, you can enhance your business performance and meet the evolving needs of your customers.\n",
    "\n",
    "## Presentation and Feedback\n",
    "\n",
    "I am available to present these findings to you and gather your feedback for any adjustments or additional insights you may require.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
